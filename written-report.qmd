---
title: "Your project title"
author: "Team Name: Team member 1, Team member 2, Team member 3, Team member 4"
date: "Update date"
format: pdf
execute: 
  warning: false
  message: false
  echo: false
editor: visual
---

```{r warning = F, echo = F}
#| label: load packages and data
library(tidyverse)
library(tidymodels)
library(ggplot2)
library(dplyr)
library(patchwork)
pokemon <- read.csv("data/pokemon.csv")
```

# Introduction and Data:

The expansive world of Pokémon, at its core, is a children's game. However, a deeper look at the numbers and statistics the game is built from reveals several intricate relationships among the different pokémons' characteristics. Each creature has its own specific set of base statistics, colloquially referred to as "base stats," including attack, special attack, defense, special defense, and speed, which indicate that pokémon's battle prowess. Summing these stats yields a pokémon's total base stats, which is the best measure of a pokémon's overall strength when all pokémon are put at an even playing field -- common knowledge for any pokémon fan. We are interested in measuring a pokémon's strength without using base stats as predictors, giving us insight on how strong the relationships among pokémon's different characteristics actually are. Thus, we are looking to answer the following research question: **Can we predict a Pokémon's Base Stat Total from other variables?** In other words, we are analyzing how well variables such as the pokémon's type, capture rate, growth rate, generation, height, weight, base happiness, weaknesses, and if the pokemon is legendary or not can predict a pokémon's total base stats. We hypothesize that a multiple linear regression model including some formation of these predictor variables will be a somewhat strong predictor for base_total -- thinking about the game, stronger pokémon would seem to have certain values for these predictor variables when compared to weaker ones: for example, legendary pokémon tend to be stronger in battle than non legendary pokémon, so we might expect is_legendary to be a useful predictor for base_total, for example.

We retrieved the dataset from kaggle.com, a large data science online community, and the dataset is called "The Complete Pokemon Dataset" created by Rounak Banik in 2017. The dataset was retrieved via web scraper from the website serebii.net, an all-in-one, reliable data hub for all things pokemon in 2017. Since it was formed in 2017, the dataset does not include pokémon from more recent games, but still includes a whopping 801 pokémon, meaning the dataset has 801 observations, one for each pokémon.

The dataset contains 23 variables, taken directly from the kaggle website for the dataset, explanations of which can be viewed [here](https://www.kaggle.com/datasets/rounakbanik/pokemon/). For our analysis, we will be focusing on these specific variables:

-   ADD VARIABLES HERE

As you'll notice, the dataset splits the base stats of each pokemon into the individual stats, but we only need to know about the base_total variable, which is included in the csv file. Each variable describes the pokémon at hand in a different way. Some, like is_legendary, may prove to be extremely important in our regression model, while with others, like name and Japanese name, we can remove them from consideration as they are simply unique identifiers.

```{r expdata1, warning = F, echo = F}
p1 <- ggplot(pokemon, aes(x = base_total)) +
  geom_histogram(binwidth = 10, fill = "blue", color = "black") +
  geom_vline(xintercept = mean(pokemon$base_total), color = "red", size = 1) +
  labs(title = "Distribution of Base Total", x = "Base Total")
```

```{r expdata2, warning = F, echo = F}
p2 <- ggplot(pokemon, aes(x = weight_kg)) +
  geom_histogram(binwidth = 10, fill = "green", color = "black") +
  labs(title = "Distribution of Pokemon Weight", x = "Weight (kg)")
```

```{r expdata3, warning = F, echo = F}
generation_means <- pokemon |>
  group_by(generation) |>
  summarise(mean_base_total = mean(base_total)) |>
  arrange(desc(mean_base_total))

p3 <- ggplot(generation_means, aes(x = as.factor(generation), y = mean_base_total)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  labs(title = "Mean Base Total Across Generations",
       x = "Generation",
       y = "Mean Base Total")
```

```{r expdata4, warning = F, echo = F}
p4 <- ggplot(pokemon, aes(x = weight_kg, y = base_total)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE, col = "blue") +
  labs(title = "Scatter Plot of Base Total vs. Weight", x = "Weight (kg)", y = "Base Total")
```

```{r expdata5, warning = F, echo = F}
p5 <- ggplot(pokemon, aes(x = as.factor(generation), y = base_total)) +
  geom_point() +
  labs(title = "Base Total Across Generations",
       x = "Generation",
       y = "Base Total")
```

```{r expdata6, warning = F, echo = F}
pokemon$is_legendary <- as.factor(pokemon$is_legendary)
p6 <- ggplot(pokemon, aes(x = weight_kg, y = base_total, color = is_legendary)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(title = "Interaction Between Weight and Legendary Status", x = "Weight (kg)", y = "Base Total")
```

# Methodology:

::: callout-important
Before you submit, make sure your code chunks are turned off with `echo: false` and there are no warnings or messages with `warning: false` and `message: false` in the YAML.
:::
